import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";

// Include both classic and `node:`-prefixed built-ins so they are treated as externals
const nodeBuiltins = [...builtins, ...builtins.map(m => `node:${m}`)];

// Shim to force pglite into browser mode inside Obsidian (no native fs)
const pgliteShimPlugin = {
  name: "pglite-shim-plugin",
  setup(build) {
    build.onLoad({ filter: /@electric-sql\/pglite\/.*\.js$/ }, async (args) => {
      const source = await fs.promises.readFile(args.path, "utf8");
      const shimmed = `const process = {}\n${source}`;
      return { contents: shimmed, loader: "js" };
    });
  },
};

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...nodeBuiltins],
	plugins: [pgliteShimPlugin],
	format: "cjs",
	target: "es2020",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
} 